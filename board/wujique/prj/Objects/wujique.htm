<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\wujique.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\wujique.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Thu Apr 21 11:46:17 2022
<BR><P>
<H3>Maximum Stack Usage =          0 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>

<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5e]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">CAN1_RX1_IRQHandler</a><BR>
 <LI><a href="#[cb]">qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cb]">qsort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5b]">ADC_IRQHandler</a> from stm32f4xx_it.o(i.ADC_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[89]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8a]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8b]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[88]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[98]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[97]">DCMI_IRQHandler</a> from stm32f4xx_it.o(i.DCMI_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">DMA1_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">DMA1_Stream4_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[78]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[81]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[82]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[83]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[84]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[85]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8d]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8e]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8f]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[86]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[87]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[71]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9a]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[79]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[99]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[69]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[68]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6b]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6a]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[92]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[91]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8c]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[73]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[94]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[93]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[96]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[95]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[72]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7a]">SDIO_IRQHandler</a> from stm32f4xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c3]">SD_disk_initialize</a> from stm324xg_eval_sdio_sd.o(i.SD_disk_initialize) referenced from sd_fat.o(.constdata)
 <LI><a href="#[c7]">SD_disk_ioctl</a> from stm324xg_eval_sdio_sd.o(i.SD_disk_ioctl) referenced from sd_fat.o(.constdata)
 <LI><a href="#[c5]">SD_disk_read</a> from stm324xg_eval_sdio_sd.o(i.SD_disk_read) referenced from sd_fat.o(.constdata)
 <LI><a href="#[c4]">SD_disk_status</a> from stm324xg_eval_sdio_sd.o(i.SD_disk_status) referenced from sd_fat.o(.constdata)
 <LI><a href="#[c6]">SD_disk_write</a> from stm324xg_eval_sdio_sd.o(i.SD_disk_write) referenced from sd_fat.o(.constdata)
 <LI><a href="#[6c]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6d]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7c]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9c]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[4b]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[64]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[63]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[62]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[65]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[66]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[67]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7b]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7f]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[80]">TIM7_IRQHandler</a> from stm32f4xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[74]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[77]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[76]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[75]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7d]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7e]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6e]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6f]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[70]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[90]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[9e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[9e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[9f]">board_app_task</a> from board.o(i.board_app_task) referenced from board.o(i.board_app_init)
 <LI><a href="#[3e]">cap_touch_task_idle</a> from touch.o(i.cap_touch_task_idle) referenced 2 times from touch.o(.data)
 <LI><a href="#[a9]">dev_xpt2046_close</a> from xpt2046.o(i.dev_xpt2046_close) referenced from xpt2046.o(.constdata)
 <LI><a href="#[a7]">dev_xpt2046_init</a> from xpt2046.o(i.dev_xpt2046_init) referenced from xpt2046.o(.constdata)
 <LI><a href="#[a8]">dev_xpt2046_open</a> from xpt2046.o(i.dev_xpt2046_open) referenced from xpt2046.o(.constdata)
 <LI><a href="#[a0]">dev_xpt2046_task</a> from xpt2046.o(i.dev_xpt2046_task) referenced from xpt2046.o(i.dev_xpt2046_open)
 <LI><a href="#[16]">drv_ILI9325_color_fill</a> from drv_ili9325.o(i.drv_ILI9325_color_fill) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[1a]">drv_ILI9325_display_onoff</a> from drv_ili9325.o(i.drv_ILI9325_display_onoff) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[15]">drv_ILI9325_drawpoint</a> from drv_ili9325.o(i.drv_ILI9325_drawpoint) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[17]">drv_ILI9325_fill</a> from drv_ili9325.o(i.drv_ILI9325_fill) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[19]">drv_ILI9325_flush</a> from drv_ili9325.o(i.drv_ILI9325_flush) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[14]">drv_ILI9325_init</a> from drv_ili9325.o(i.drv_ILI9325_init) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[1c]">drv_ILI9325_lcd_bl</a> from drv_ili9325.o(i.drv_ILI9325_lcd_bl) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[18]">drv_ILI9325_prepare_display</a> from drv_ili9325.o(i.drv_ILI9325_prepare_display) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[1b]">drv_ILI9325_scan_dir</a> from drv_ili9325.o(i.drv_ILI9325_scan_dir) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[1d]">drv_ILI9325_update</a> from drv_ili9325.o(i.drv_ILI9325_update) referenced 2 times from drv_ili9325.o(.data)
 <LI><a href="#[20]">drv_ILI9341_color_fill</a> from drv_ili9341.o(i.drv_ILI9341_color_fill) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[24]">drv_ILI9341_display_onoff</a> from drv_ili9341.o(i.drv_ILI9341_display_onoff) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[1f]">drv_ILI9341_drawpoint</a> from drv_ili9341.o(i.drv_ILI9341_drawpoint) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[21]">drv_ILI9341_fill</a> from drv_ili9341.o(i.drv_ILI9341_fill) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[23]">drv_ILI9341_flush</a> from drv_ili9341.o(i.drv_ILI9341_flush) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[1e]">drv_ILI9341_init</a> from drv_ili9341.o(i.drv_ILI9341_init) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[26]">drv_ILI9341_lcd_bl</a> from drv_ili9341.o(i.drv_ILI9341_lcd_bl) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[22]">drv_ILI9341_prepare_display</a> from drv_ili9341.o(i.drv_ILI9341_prepare_display) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[25]">drv_ILI9341_scan_dir</a> from drv_ili9341.o(i.drv_ILI9341_scan_dir) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[27]">drv_ILI9341_update</a> from drv_ili9341.o(i.drv_ILI9341_update) referenced 2 times from drv_ili9341.o(.data)
 <LI><a href="#[2]">drv_NT35510_color_fill</a> from drv_nt35510.o(i.drv_NT35510_color_fill) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[6]">drv_NT35510_display_onoff</a> from drv_nt35510.o(i.drv_NT35510_display_onoff) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[1]">drv_NT35510_drawpoint</a> from drv_nt35510.o(i.drv_NT35510_drawpoint) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[3]">drv_NT35510_fill</a> from drv_nt35510.o(i.drv_NT35510_fill) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[5]">drv_NT35510_flush</a> from drv_nt35510.o(i.drv_NT35510_flush) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[0]">drv_NT35510_init</a> from drv_nt35510.o(i.drv_NT35510_init) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[8]">drv_NT35510_lcd_bl</a> from drv_nt35510.o(i.drv_NT35510_lcd_bl) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[4]">drv_NT35510_prepare_display</a> from drv_nt35510.o(i.drv_NT35510_prepare_display) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[7]">drv_NT35510_scan_dir</a> from drv_nt35510.o(i.drv_NT35510_scan_dir) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[9]">drv_NT35510_update</a> from drv_nt35510.o(i.drv_NT35510_update) referenced 2 times from drv_nt35510.o(.data)
 <LI><a href="#[c]">drv_R61408_color_fill</a> from drv_r61408.o(i.drv_R61408_color_fill) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[10]">drv_R61408_display_onoff</a> from drv_r61408.o(i.drv_R61408_display_onoff) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[b]">drv_R61408_drawpoint</a> from drv_r61408.o(i.drv_R61408_drawpoint) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[d]">drv_R61408_fill</a> from drv_r61408.o(i.drv_R61408_fill) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[f]">drv_R61408_flush</a> from drv_r61408.o(i.drv_R61408_flush) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[a]">drv_R61408_init</a> from drv_r61408.o(i.drv_R61408_init) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[12]">drv_R61408_lcd_bl</a> from drv_r61408.o(i.drv_R61408_lcd_bl) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[e]">drv_R61408_prepare_display</a> from drv_r61408.o(i.drv_R61408_prepare_display) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[11]">drv_R61408_scan_dir</a> from drv_r61408.o(i.drv_R61408_scan_dir) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[13]">drv_R61408_update</a> from drv_r61408.o(i.drv_R61408_update) referenced 2 times from drv_r61408.o(.data)
 <LI><a href="#[34]">drv_ST7565_color_fill</a> from drv_str7565.o(i.drv_ST7565_color_fill) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[38]">drv_ST7565_display_onoff</a> from drv_str7565.o(i.drv_ST7565_display_onoff) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[33]">drv_ST7565_drawpoint</a> from drv_str7565.o(i.drv_ST7565_drawpoint) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[35]">drv_ST7565_fill</a> from drv_str7565.o(i.drv_ST7565_fill) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[37]">drv_ST7565_flush</a> from drv_str7565.o(i.drv_ST7565_flush) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[32]">drv_ST7565_init</a> from drv_str7565.o(i.drv_ST7565_init) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[3a]">drv_ST7565_lcd_bl</a> from drv_str7565.o(i.drv_ST7565_lcd_bl) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[36]">drv_ST7565_prepare_display</a> from drv_str7565.o(i.drv_ST7565_prepare_display) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[39]">drv_ST7565_scan_dir</a> from drv_str7565.o(i.drv_ST7565_scan_dir) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[3b]">drv_ST7565_update</a> from drv_str7565.o(i.drv_ST7565_update) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[2a]">drv_null_color_fill</a> from drv_lcd.o(i.drv_null_color_fill) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[2e]">drv_null_display_onoff</a> from drv_lcd.o(i.drv_null_display_onoff) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[29]">drv_null_drawpoint</a> from drv_lcd.o(i.drv_null_drawpoint) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[2b]">drv_null_fill</a> from drv_lcd.o(i.drv_null_fill) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[2d]">drv_null_flush</a> from drv_lcd.o(i.drv_null_flush) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[28]">drv_null_init</a> from drv_lcd.o(i.drv_null_init) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[30]">drv_null_lcd_bl</a> from drv_lcd.o(i.drv_null_lcd_bl) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[2c]">drv_null_prepare_display</a> from drv_lcd.o(i.drv_null_prepare_display) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[2f]">drv_null_scan_dir</a> from drv_lcd.o(i.drv_null_scan_dir) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[31]">drv_null_update</a> from drv_lcd.o(i.drv_null_update) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[3d]">drv_ssd1615_display_onoff</a> from drv_str7565.o(i.drv_ssd1615_display_onoff) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[3c]">drv_ssd1615_init</a> from drv_str7565.o(i.drv_ssd1615_init) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[9b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a5]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[a4]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[a6]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[a1]">sort_by_x</a> from testutils.o(i.sort_by_x) referenced from testutils.o(i.getxy)
 <LI><a href="#[a2]">sort_by_y</a> from testutils.o(i.sort_by_y) referenced from testutils.o(i.getxy)
 <LI><a href="#[a3]">start_task</a> from petite.o(i.start_task) referenced from petite.o(i.petite_app)
 <LI><a href="#[ba]">test_camera</a> from wujique_test.o(i.test_camera) referenced from wujique_test.o(.constdata)
 <LI><a href="#[bf]">test_can_rec</a> from wujique_test.o(i.test_can_rec) referenced from wujique_test.o(.constdata)
 <LI><a href="#[c0]">test_can_snd</a> from wujique_test.o(i.test_can_snd) referenced from wujique_test.o(.constdata)
 <LI><a href="#[c2]">test_esp8266</a> from wujique_test.o(i.test_esp8266) referenced from wujique_test.o(.constdata)
 <LI><a href="#[ab]">test_i2c_oled_display</a> from wujique_test.o(i.test_i2c_oled_display) referenced from wujique_test.o(.constdata)
 <LI><a href="#[b7]">test_key</a> from wujique_test.o(i.test_key) referenced from wujique_test.o(.constdata)
 <LI><a href="#[b9]">test_keypad</a> from wujique_test.o(i.test_keypad) referenced from wujique_test.o(.constdata)
 <LI><a href="#[af]">test_lcd_font</a> from wujique_test.o(i.test_lcd_font) referenced from wujique_test.o(.constdata)
 <LI><a href="#[ae]">test_lcd_pic</a> from wujique_test.o(i.test_lcd_pic) referenced from wujique_test.o(.constdata)
 <LI><a href="#[bd]">test_rs485_rec</a> from wujique_test.o(i.test_rs485_rec) referenced from wujique_test.o(.constdata)
 <LI><a href="#[be]">test_rs485_snd</a> from wujique_test.o(i.test_rs485_snd) referenced from wujique_test.o(.constdata)
 <LI><a href="#[b0]">test_sound_buzzer</a> from wujique_test.o(i.test_sound_buzzer) referenced from wujique_test.o(.constdata)
 <LI><a href="#[b1]">test_sound_dac</a> from wujique_test.o(i.test_sound_dac) referenced from wujique_test.o(.constdata)
 <LI><a href="#[b2]">test_sound_fm</a> from wujique_test.o(i.test_sound_fm) referenced from wujique_test.o(.constdata)
 <LI><a href="#[b4]">test_sound_rec</a> from wujique_test.o(i.test_sound_rec) referenced from wujique_test.o(.constdata)
 <LI><a href="#[b3]">test_sound_wm8978</a> from wujique_test.o(i.test_sound_wm8978) referenced from wujique_test.o(.constdata)
 <LI><a href="#[ac]">test_spi_cog_display</a> from wujique_test.o(i.test_spi_cog_display) referenced from wujique_test.o(.constdata)
 <LI><a href="#[bc]">test_spiflash_board</a> from wujique_test.o(i.test_spiflash_board) referenced from wujique_test.o(.constdata)
 <LI><a href="#[bb]">test_spiflash_core</a> from wujique_test.o(i.test_spiflash_core) referenced from wujique_test.o(.constdata)
 <LI><a href="#[ad]">test_tft_display</a> from wujique_test.o(i.test_tft_display) referenced from wujique_test.o(.constdata)
 <LI><a href="#[b8]">test_touchkey</a> from wujique_test.o(i.test_touchkey) referenced from wujique_test.o(.constdata)
 <LI><a href="#[b5]">test_tp_calibrate</a> from wujique_test.o(i.test_tp_calibrate) referenced from wujique_test.o(.constdata)
 <LI><a href="#[b6]">test_tp_test</a> from wujique_test.o(i.test_tp_test) referenced from wujique_test.o(.constdata)
 <LI><a href="#[c1]">test_uart</a> from wujique_test.o(i.test_uart) referenced from wujique_test.o(.constdata)
 <LI><a href="#[aa]">xpt2046_task</a> from xpt2046.o(i.xpt2046_task) referenced from xpt2046.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[dd]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[45]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32f]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[32e]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[47]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[322]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[3f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>qsort</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, qsort.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getxy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_set_cal
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_init
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_dejitter_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
</UL>

<P><STRONG><a name="[ce]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[24e]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
</UL>

<P><STRONG><a name="[110]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string_center
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[178]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, strcmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_open
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_close
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_font
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_find_dir
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_run
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_close
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
</UL>

<P><STRONG><a name="[26d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2d4]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, d2f.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d7]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[d3]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, depilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[d2]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, depilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[27a]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[27b]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[280]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[27d]"></a>ADC_CommonInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[279]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[278]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[277]"></a>ADC_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[5b]"></a>ADC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.ADC_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27e]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[27f]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[27c]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_TempSensorVrefintCmd))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[df]"></a>BUS_DCMI_Config</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, mcu_dcmi.o(i.BUS_DCMI_Config))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ITConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_camera_show
</UL>

<P><STRONG><a name="[e4]"></a>BUS_DCMI_DMA_Init</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, mcu_dcmi.o(i.BUS_DCMI_DMA_Init))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
</UL>

<P><STRONG><a name="[ea]"></a>BUS_DCMI_HW_Init</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, stm32f407_hal_msp.o(i.BUS_DCMI_HW_Init))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[43]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can1_rx0_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[281]"></a>CAN_Receive</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can1_rx0_IRQ
</UL>

<P><STRONG><a name="[283]"></a>DCMI_CaptureCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_CaptureCmd))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_start
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
</UL>

<P><STRONG><a name="[fc]"></a>DCMI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[282]"></a>DCMI_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_start
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
</UL>

<P><STRONG><a name="[fb]"></a>DCMI_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>DCMI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DCMI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_GetITStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearITPendingBit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_frame_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>DCMI_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
</UL>

<P><STRONG><a name="[e1]"></a>DCMI_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
</UL>

<P><STRONG><a name="[fe]"></a>DCMI_PWDN_RESET_Init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f407_hal_msp.o(i.DCMI_PWDN_RESET_Init))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[57]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_dma_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>DMA_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_start
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_start
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
</UL>

<P><STRONG><a name="[e5]"></a>DMA_DeInit</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[e8]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[e7]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[14b]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[106]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>DMA_GetITStatus</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>DMA_ITConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[e6]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[46]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stimer.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
</UL>

<P><STRONG><a name="[10a]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
</UL>

<P><STRONG><a name="[10b]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[286]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
</UL>

<P><STRONG><a name="[285]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
</UL>

<P><STRONG><a name="[10c]"></a>FatFs_FileTest</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, sd_fat.o(i.FatFs_FileTest))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormat
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
</UL>

<P><STRONG><a name="[114]"></a>FatFs_GetVolume</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sd_fat.o(i.FatFs_GetVolume))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
</UL>

<P><STRONG><a name="[ee]"></a>GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_out
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_in
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
</UL>

<P><STRONG><a name="[ed]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
</UL>

<P><STRONG><a name="[13b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>

<P><STRONG><a name="[ff]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
</UL>

<P><STRONG><a name="[101]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
</UL>

<P><STRONG><a name="[41]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[293]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.I2S_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_config
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[297]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.I2S_FullDuplexConfig))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_config
</UL>

<P><STRONG><a name="[292]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.I2S_Init))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[eb]"></a>MCO1_Init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, mcu_dcmi.o(i.MCO1_Init))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockSecuritySystemCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
</UL>

<P><STRONG><a name="[42]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>NVIC_Init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_NVIC_Configuration
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_dcmi_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
</UL>

<P><STRONG><a name="[1ac]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[1ab]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[11c]"></a>OV2640_Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_Config))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_camera_show
</UL>

<P><STRONG><a name="[120]"></a>OV2640_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_Init))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[11e]"></a>OV2640_JPEGConfig</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_JPEGConfig))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Config
</UL>

<P><STRONG><a name="[11f]"></a>OV2640_QQVGAConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_QQVGAConfig))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Config
</UL>

<P><STRONG><a name="[11d]"></a>OV2640_QVGAConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_QVGAConfig))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Config
</UL>

<P><STRONG><a name="[128]"></a>OV5640_Flash_Lamp</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Flash_Lamp))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[12c]"></a>OV5640_Init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Init))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[298]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[113]"></a>PrintFormat</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, log.o(i.PrintFormat))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[ec]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_dcmi_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
</UL>

<P><STRONG><a name="[e0]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
</UL>

<P><STRONG><a name="[284]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
</UL>

<P><STRONG><a name="[289]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[15a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[14d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[138]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[11a]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClockSecuritySystemCmd))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
</UL>

<P><STRONG><a name="[16e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[291]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[28f]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_I2SCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[29a]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[11b]"></a>RCC_MCO1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_MCO1Config))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
</UL>

<P><STRONG><a name="[290]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PLLI2SCmd))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[29c]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[29b]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[12f]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[130]"></a>RTC_ExitInitMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[12e]"></a>RTC_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[299]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[131]"></a>RTC_SetDate</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[135]"></a>RTC_SetTime</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[134]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[29d]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[f3]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[151]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[14f]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[154]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[118]"></a>SDIO_DataConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[137]"></a>SDIO_DeInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f5]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[f2]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[150]"></a>SDIO_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[148]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[f6]"></a>SDIO_GetResponse</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[7a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>SDIO_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[13d]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[119]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[117]"></a>SDIO_SendCommand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[14e]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[13a]"></a>SD_Detect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_Detect))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[13c]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_EnableWideBusOperation))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[146]"></a>SD_GetCardInfo</STRONG> (Thumb, 612 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[13e]"></a>SD_GetState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[140]"></a>SD_GetStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetStatus))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_read
</UL>

<P><STRONG><a name="[141]"></a>SD_Init</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_NVIC_Configuration
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
</UL>

<P><STRONG><a name="[145]"></a>SD_InitializeCards</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_InitializeCards))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[149]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, mcu_sdio.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[14c]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, mcu_sdio.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
</UL>

<P><STRONG><a name="[143]"></a>SD_LowLevel_Init</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, mcu_sdio.o(i.SD_LowLevel_Init))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[144]"></a>SD_PowerON</STRONG> (Thumb, 376 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_PowerON))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[109]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_ReadMultiBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_read
</UL>

<P><STRONG><a name="[147]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_SelectDeselect))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[13f]"></a>SD_SendStatus</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_SendStatus))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[155]"></a>SD_StopTransfer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_StopTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[156]"></a>SD_WaitReadOperation</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_WaitReadOperation))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_read
</UL>

<P><STRONG><a name="[157]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_WaitWriteOperation))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_write
</UL>

<P><STRONG><a name="[158]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_WriteMultiBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_write
</UL>

<P><STRONG><a name="[c3]"></a>SD_disk_initialize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_initialize))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_fat.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>SD_disk_ioctl</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> sd_fat.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>SD_disk_read</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_read))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_fat.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>SD_disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_status))
<BR>[Address Reference Count : 1]<UL><LI> sd_fat.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>SD_disk_write</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_write))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_fat.o(.constdata)
</UL>
<P><STRONG><a name="[287]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_close
</UL>

<P><STRONG><a name="[295]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
</UL>

<P><STRONG><a name="[159]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[28b]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[28c]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[28d]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[28a]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
</UL>

<P><STRONG><a name="[48]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>TIM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b7]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[29f]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
</UL>

<P><STRONG><a name="[2a2]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
</UL>

<P><STRONG><a name="[2a0]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_stop
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
</UL>

<P><STRONG><a name="[2a7]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture1))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[2a8]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[2a9]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture3))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[2aa]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture4))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[2a5]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[2a6]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[29e]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
</UL>

<P><STRONG><a name="[161]"></a>TIM_ICInit</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ICInit))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
</UL>

<P><STRONG><a name="[2a4]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
</UL>

<P><STRONG><a name="[2ab]"></a>TIM_OC1Init</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2ad]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2ae]"></a>TIM_OC2Init</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2b0]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2b1]"></a>TIM_OC3Init</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2b3]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2b4]"></a>TIM_OC4Init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2b6]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2ac]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2af]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2b2]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2b5]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[2a3]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
</UL>

<P><STRONG><a name="[165]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[167]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[169]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[163]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2a1]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
</UL>

<P><STRONG><a name="[15b]"></a>Time_Update</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stimer.o(i.Time_Update))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6e]"></a>USART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>USART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>USART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2bc]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
</UL>

<P><STRONG><a name="[2b9]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>

<P><STRONG><a name="[2bb]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
</UL>

<P><STRONG><a name="[2bf]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
</UL>

<P><STRONG><a name="[2b8]"></a>USART_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>

<P><STRONG><a name="[2bd]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
</UL>

<P><STRONG><a name="[16d]"></a>USART_Init</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
</UL>

<P><STRONG><a name="[2ba]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>

<P><STRONG><a name="[2c0]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
</UL>

<P><STRONG><a name="[44]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
</UL>

<P><STRONG><a name="[171]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[320]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[296]"></a>audio_pipe_callback</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, audio_pipeline.o(i.audio_pipe_callback))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_process
</UL>

<P><STRONG><a name="[177]"></a>audio_pipe_close</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, audio_pipeline.o(i.audio_pipe_close))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_stop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>

<P><STRONG><a name="[17a]"></a>audio_pipe_open</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, audio_pipeline.o(i.audio_pipe_open))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[17c]"></a>audio_pipe_run</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, audio_pipeline.o(i.audio_pipe_run))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_start
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dataformat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_dataformat
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_open
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[183]"></a>bmp_parse_creat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.bmp_parse_creat))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
</UL>

<P><STRONG><a name="[184]"></a>bmp_parse_del</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, display.o(i.bmp_parse_del))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
</UL>

<P><STRONG><a name="[187]"></a>bmp_parse_open</STRONG> (Thumb, 472 bytes, Stack size 0 bytes, display.o(i.bmp_parse_open))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
</UL>

<P><STRONG><a name="[18a]"></a>bmp_parse_read</STRONG> (Thumb, 476 bytes, Stack size 0 bytes, display.o(i.bmp_parse_read))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
</UL>

<P><STRONG><a name="[18c]"></a>board_app_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, board.o(i.board_app_init))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[9f]"></a>board_app_task</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, board.o(i.board_app_task))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_add_node
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.board_app_init)
</UL>
<P><STRONG><a name="[191]"></a>board_camera_show</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, board.o(i.board_camera_show))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_start
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_get_sta
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_prepare_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[197]"></a>board_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, board.o(i.board_init))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_dcmi_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1a5]"></a>board_low_task</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, board.o(i.board_low_task))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_scan
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1aa]"></a>board_mcu_preinit</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, main.o(i.board_mcu_preinit))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>bus_dcmi_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mcu_dcmi.o(i.bus_dcmi_init))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[127]"></a>bus_i2c_close</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bus_i2c.o(i.bus_i2c_close))
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>

<P><STRONG><a name="[125]"></a>bus_i2c_open</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bus_i2c.o(i.bus_i2c_open))
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>

<P><STRONG><a name="[1b4]"></a>bus_i2c_register</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, bus_i2c.o(i.bus_i2c_register))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[126]"></a>bus_i2c_transfer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bus_i2c.o(i.bus_i2c_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>

<P><STRONG><a name="[1bc]"></a>bus_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_bl))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_lcd_bl
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_lcd_bl
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_lcd_bl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_lcd_bl
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_lcd_bl
</UL>

<P><STRONG><a name="[1be]"></a>bus_lcd_close</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_close))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_display_onoff
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_lcd_bl
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_flush
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_lcd_bl
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_flush
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_color_fill
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_scan_dir
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_drawpoint
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_display_onoff
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_lcd_bl
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_flush
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_color_fill
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_scan_dir
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_drawpoint
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_display_onoff
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_lcd_bl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_lcd_bl
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_flush
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
</UL>

<P><STRONG><a name="[1c0]"></a>bus_lcd_open</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_open))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_display_onoff
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_lcd_bl
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_flush
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_lcd_bl
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_flush
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_color_fill
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_scan_dir
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_drawpoint
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_display_onoff
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_lcd_bl
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_flush
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_color_fill
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_scan_dir
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_drawpoint
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_display_onoff
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_lcd_bl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_lcd_bl
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_flush
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
</UL>

<P><STRONG><a name="[1c2]"></a>bus_lcd_read_data</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_read_data))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
</UL>

<P><STRONG><a name="[1c4]"></a>bus_lcd_rst</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_rst))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
</UL>

<P><STRONG><a name="[23e]"></a>bus_lcd_w_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_w_data))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_color_fill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_color_fill
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
</UL>

<P><STRONG><a name="[1c5]"></a>bus_lcd_write_cmd</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_write_cmd))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_display_onoff
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_scan_dir
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_scan_dir
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
</UL>

<P><STRONG><a name="[1c6]"></a>bus_lcd_write_data</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_write_data))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_flush
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_flush
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_scan_dir
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_drawpoint
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_flush
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_scan_dir
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_drawpoint
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_flush
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
</UL>

<P><STRONG><a name="[1c7]"></a>bus_spi_register</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spi_register))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[1bf]"></a>bus_spich_close</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spich_close))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_close
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_close
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
</UL>

<P><STRONG><a name="[1cc]"></a>bus_spich_cs</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spich_cs))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readJTD
</UL>

<P><STRONG><a name="[1c1]"></a>bus_spich_open</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spich_open))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_open
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_open
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
</UL>

<P><STRONG><a name="[1cf]"></a>bus_spich_register</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spich_register))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[1c3]"></a>bus_spich_transfer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spich_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readJTD
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
</UL>

<P><STRONG><a name="[1ae]"></a>bus_uart_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bus_uart.o(i.bus_uart_init))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[1af]"></a>bus_uart_open</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, bus_uart.o(i.bus_uart_open))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkfifo_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[1b7]"></a>bus_vi2c_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_out
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
</UL>

<P><STRONG><a name="[1db]"></a>bus_vi2c_sda_input</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_sda_input))
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
</UL>

<P><STRONG><a name="[1d6]"></a>bus_vi2c_sda_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_sda_output))
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>

<P><STRONG><a name="[1b8]"></a>bus_vi2c_transfer</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
</UL>

<P><STRONG><a name="[1ca]"></a>bus_vspi_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bus_vspi.o(i.bus_vspi_close))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>

<P><STRONG><a name="[1c8]"></a>bus_vspi_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bus_vspi.o(i.bus_vspi_init))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
</UL>

<P><STRONG><a name="[1ce]"></a>bus_vspi_open</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bus_vspi.o(i.bus_vspi_open))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
</UL>

<P><STRONG><a name="[1d1]"></a>bus_vspi_transfer</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, bus_vspi.o(i.bus_vspi_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
</UL>

<P><STRONG><a name="[1a0]"></a>camera_init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, camera_api.o(i.camera_init))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[30b]"></a>camera_open</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, camera_api.o(i.camera_open))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[3e]"></a>cap_touch_task_idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touch.o(i.cap_touch_task_idle))
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[1f8]"></a>dev_buzzer_close</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drv_buzzer.o(i.dev_buzzer_close))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
</UL>

<P><STRONG><a name="[19a]"></a>dev_buzzer_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drv_buzzer.o(i.dev_buzzer_init))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[1fc]"></a>dev_buzzer_open</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_buzzer.o(i.dev_buzzer_open))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
</UL>

<P><STRONG><a name="[1fe]"></a>dev_camera_close</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, camera_api.o(i.dev_camera_close))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[1ff]"></a>dev_camera_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, camera_api.o(i.dev_camera_stop))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_close
</UL>

<P><STRONG><a name="[1a2]"></a>dev_dacsound_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dacsound.o(i.dev_dacsound_init))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[311]"></a>dev_key_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_key.o(i.dev_key_close))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
</UL>

<P><STRONG><a name="[19b]"></a>dev_key_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_key.o(i.dev_key_init))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[30f]"></a>dev_key_open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_key.o(i.dev_key_open))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[310]"></a>dev_key_read</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, drv_key.o(i.dev_key_read))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
</UL>

<P><STRONG><a name="[1a6]"></a>dev_key_scan</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, drv_key.o(i.dev_key_scan))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[199]"></a>dev_keypad_init</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, drv_keypad.o(i.dev_keypad_init))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[312]"></a>dev_keypad_open</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_keypad.o(i.dev_keypad_open))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_keypad
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[250]"></a>dev_keypad_read</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, drv_keypad.o(i.dev_keypad_read))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_get_key
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_keypad
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
</UL>

<P><STRONG><a name="[1a7]"></a>dev_keypad_scan</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, drv_keypad.o(i.dev_keypad_scan))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[31a]"></a>dev_lcd_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_close))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
</UL>

<P><STRONG><a name="[24b]"></a>dev_lcd_color_fill</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_color_fill))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_core
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_board
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spi_cog_display
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_keypad
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_i2c_oled_display
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[273]"></a>dev_lcd_drawpoint</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_drawpoint))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
</UL>

<P><STRONG><a name="[204]"></a>dev_lcd_fill</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_fill))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>

<P><STRONG><a name="[20b]"></a>dev_lcd_flush</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_flush))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
</UL>

<P><STRONG><a name="[200]"></a>dev_lcd_open</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_open))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[193]"></a>dev_lcd_prepare_display</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_prepare_display))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_camera_show
</UL>

<P><STRONG><a name="[201]"></a>dev_lcd_put_string</STRONG> (Thumb, 412 bytes, Stack size 0 bytes, display.o(i.dev_lcd_put_string))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hw
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_font
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_fill
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_core
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_board
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spi_cog_display
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_keypad
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_i2c_oled_display
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
</UL>

<P><STRONG><a name="[206]"></a>dev_lcd_register</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_register))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_finddrv
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[192]"></a>dev_lcd_setdir</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_setdir))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_camera_show
</UL>

<P><STRONG><a name="[209]"></a>dev_lcd_show_bmp</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, display.o(i.dev_lcd_show_bmp))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_prepare_display
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_flush
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_open
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_del
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_creat
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
</UL>

<P><STRONG><a name="[20a]"></a>dev_lcd_update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_update))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_core
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_board
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spi_cog_display
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_keypad
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_i2c_oled_display
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[20c]"></a>dev_lcdbus_register</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, bus_lcd.o(i.dev_lcdbus_register))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[20e]"></a>dev_spiflash_close</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_close))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
</UL>

<P><STRONG><a name="[20f]"></a>dev_spiflash_erase</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_erase))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_erase
</UL>

<P><STRONG><a name="[212]"></a>dev_spiflash_open</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_open))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
</UL>

<P><STRONG><a name="[213]"></a>dev_spiflash_read</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_read))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_read
</UL>

<P><STRONG><a name="[215]"></a>dev_spiflash_register</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_register))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readJTD
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[216]"></a>dev_spiflash_sector_erase</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_sector_erase))
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
</UL>

<P><STRONG><a name="[217]"></a>dev_spiflash_sector_read</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_sector_read))
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
</UL>

<P><STRONG><a name="[218]"></a>dev_spiflash_sector_write</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_sector_write))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
</UL>

<P><STRONG><a name="[21a]"></a>dev_spiflash_test_chipcheck</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_test_chipcheck))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_read
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_erase
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_open
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_board
</UL>

<P><STRONG><a name="[21b]"></a>dev_spiflash_test_chiperase</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_test_chiperase))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_read
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_erase
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_open
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_core
</UL>

<P><STRONG><a name="[219]"></a>dev_spiflash_write</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_write))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_write
</UL>

<P><STRONG><a name="[1a1]"></a>dev_tea5767_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_tea5767.o(i.dev_tea5767_init))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[21d]"></a>dev_tea5767_open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_tea5767.o(i.dev_tea5767_open))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
</UL>

<P><STRONG><a name="[21e]"></a>dev_tea5767_setfre</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drv_tea5767.o(i.dev_tea5767_setfre))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_fre2pll
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
</UL>

<P><STRONG><a name="[316]"></a>dev_touchkey_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_touchkey.o(i.dev_touchkey_close))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
</UL>

<P><STRONG><a name="[19d]"></a>dev_touchkey_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_touchkey.o(i.dev_touchkey_init))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[314]"></a>dev_touchkey_open</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_touchkey.o(i.dev_touchkey_open))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
</UL>

<P><STRONG><a name="[315]"></a>dev_touchkey_read</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, drv_touchkey.o(i.dev_touchkey_read))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
</UL>

<P><STRONG><a name="[1a9]"></a>dev_touchkey_task</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, drv_touchkey.o(i.dev_touchkey_task))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_scan
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_resetpad
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_iocap
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[1a4]"></a>dev_wm8978_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_init))
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[17e]"></a>dev_wm8978_inout</STRONG> (Thumb, 512 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_inout))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_run
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
</UL>

<P><STRONG><a name="[17d]"></a>dev_wm8978_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_open))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_run
</UL>

<P><STRONG><a name="[228]"></a>dev_wm8978_readreg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_readreg))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_aux_gain
</UL>

<P><STRONG><a name="[227]"></a>dev_wm8978_set_aux_gain</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_set_aux_gain))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_readreg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[17f]"></a>dev_wm8978_set_dataformat</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_set_dataformat))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_run
</UL>

<P><STRONG><a name="[229]"></a>dev_wm8978_set_mic_gain</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_set_mic_gain))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[22a]"></a>dev_wm8978_set_phone_vol</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_set_phone_vol))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[22b]"></a>dev_wm8978_set_spk_vol</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_set_spk_vol))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[a9]"></a>dev_xpt2046_close</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, xpt2046.o(i.dev_xpt2046_close))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>dev_xpt2046_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, xpt2046.o(i.dev_xpt2046_init))
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>dev_xpt2046_open</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, xpt2046.o(i.dev_xpt2046_open))
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>dev_xpt2046_task</STRONG> (Thumb, 316 bytes, Stack size 0 bytes, xpt2046.o(i.dev_xpt2046_task))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_fill_buff
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xpt2046.o(i.dev_xpt2046_open)
</UL>
<P><STRONG><a name="[25a]"></a>disk_initialize</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[25b]"></a>disk_ioctl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[257]"></a>disk_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_read))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[265]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[235]"></a>disk_write</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_write))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[16]"></a>drv_ILI9325_color_fill</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_color_fill))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_w_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>drv_ILI9325_fill</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_fill))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>drv_ILI9325_flush</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_flush))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>drv_ILI9325_init</STRONG> (Thumb, 1360 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_init))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>drv_ILI9325_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_lcd_bl))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>drv_ILI9325_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_prepare_display))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>drv_ILI9325_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[23c]"></a>drv_ILI9325_xy2cp</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_xy2cp))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_prepare_display
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
</UL>

<P><STRONG><a name="[20]"></a>drv_ILI9341_color_fill</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_color_fill))
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_w_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>drv_ILI9341_fill</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_fill))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>drv_ILI9341_flush</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_flush))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>drv_ILI9341_init</STRONG> (Thumb, 894 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_init))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>drv_ILI9341_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_lcd_bl))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>drv_ILI9341_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_prepare_display))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[240]"></a>drv_ILI9341_set_cp_addr</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_set_cp_addr))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_prepare_display
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
</UL>

<P><STRONG><a name="[27]"></a>drv_ILI9341_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[23f]"></a>drv_ILI9341_xy2cp</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_xy2cp))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_prepare_display
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
</UL>

<P><STRONG><a name="[2]"></a>drv_NT35510_color_fill</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_color_fill))
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_w_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_xy2cp
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>drv_NT35510_fill</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_fill))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_xy2cp
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>drv_NT35510_flush</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_flush))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>drv_NT35510_init</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_init))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>drv_NT35510_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_lcd_bl))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>drv_NT35510_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_prepare_display))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_xy2cp
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[242]"></a>drv_NT35510_set_cp_addr</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_set_cp_addr))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_prepare_display
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_color_fill
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_drawpoint
</UL>

<P><STRONG><a name="[9]"></a>drv_NT35510_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[241]"></a>drv_NT35510_xy2cp</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_xy2cp))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_prepare_display
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_color_fill
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_drawpoint
</UL>

<P><STRONG><a name="[c]"></a>drv_R61408_color_fill</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_color_fill))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_xy2cp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_w_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>drv_R61408_fill</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_fill))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_xy2cp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>drv_R61408_flush</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_flush))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>drv_R61408_init</STRONG> (Thumb, 332 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_init))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>drv_R61408_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_lcd_bl))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>drv_R61408_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_prepare_display))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_xy2cp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[244]"></a>drv_R61408_set_cp_addr</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_set_cp_addr))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_prepare_display
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_color_fill
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_drawpoint
</UL>

<P><STRONG><a name="[13]"></a>drv_R61408_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[243]"></a>drv_R61408_xy2cp</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_xy2cp))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_prepare_display
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_color_fill
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_drawpoint
</UL>

<P><STRONG><a name="[34]"></a>drv_ST7565_color_fill</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_color_fill))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>drv_ST7565_fill</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_fill))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>drv_ST7565_flush</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_flush))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>drv_ST7565_init</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_init))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>drv_ST7565_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_lcd_bl))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>drv_ST7565_prepare_display</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_prepare_display))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>drv_ST7565_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_update))
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>drv_null_color_fill</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_color_fill))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>drv_null_drawpoint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_drawpoint))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>drv_null_fill</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_fill))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>drv_null_flush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_flush))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>drv_null_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_init))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>drv_null_lcd_bl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_lcd_bl))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>drv_null_prepare_display</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_prepare_display))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>drv_null_update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>drv_ssd1615_display_onoff</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ssd1615_display_onoff))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>drv_ssd1615_init</STRONG> (Thumb, 332 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ssd1615_init))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[246]"></a>emenu_deal_key_2col</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, emenu.o(i.emenu_deal_key_2col))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emunu_find_next
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_find_fa
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>

<P><STRONG><a name="[249]"></a>emenu_deal_key_list</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, emenu.o(i.emenu_deal_key_list))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emunu_find_next
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_find_fa
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>

<P><STRONG><a name="[24a]"></a>emenu_display</STRONG> (Thumb, 518 bytes, Stack size 0 bytes, emenu.o(i.emenu_display))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>

<P><STRONG><a name="[248]"></a>emenu_find_fa</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, emenu.o(i.emenu_find_fa))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_list
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_2col
</UL>

<P><STRONG><a name="[24f]"></a>emenu_get_key</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, emenu.o(i.emenu_get_key))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>

<P><STRONG><a name="[251]"></a>emenu_run</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, emenu.o(i.emenu_run))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hw
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_get_key
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_list
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_2col
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[247]"></a>emunu_find_next</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, emenu.o(i.emunu_find_next))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_list
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_2col
</UL>

<P><STRONG><a name="[10f]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.f_close))
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[115]"></a>f_getfree</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, ff.o(i.f_getfree))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_GetVolume
</UL>

<P><STRONG><a name="[256]"></a>f_lseek</STRONG> (Thumb, 352 bytes, Stack size 0 bytes, ff.o(i.f_lseek))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
</UL>

<P><STRONG><a name="[258]"></a>f_mkfs</STRONG> (Thumb, 1422 bytes, Stack size 0 bytes, ff.o(i.f_mkfs))
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
</UL>

<P><STRONG><a name="[25f]"></a>f_mount</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ff.o(i.f_mount))
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
</UL>

<P><STRONG><a name="[10e]"></a>f_open</STRONG> (Thumb, 438 bytes, Stack size 0 bytes, ff.o(i.f_open))
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[112]"></a>f_read</STRONG> (Thumb, 356 bytes, Stack size 0 bytes, ff.o(i.f_read))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[252]"></a>f_sync</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, ff.o(i.f_sync))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[111]"></a>f_write</STRONG> (Thumb, 418 bytes, Stack size 0 bytes, ff.o(i.f_write))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[1f0]"></a>ff_oem2uni</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1f3]"></a>ff_uni2oem</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1e9]"></a>ff_wtoupper</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[266]"></a>font_dot_wjq_addr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, font_wjq.o(i.font_dot_wjq_addr))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_index_gbk_wjq
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
</UL>

<P><STRONG><a name="[268]"></a>font_dot_ymy_addr</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, font_ymy.o(i.font_dot_ymy_addr))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_pos_1_gbk
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_pos_1_big5
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
</UL>

<P><STRONG><a name="[202]"></a>font_find_font</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, font.o(i.font_find_font))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hw
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>

<P><STRONG><a name="[203]"></a>font_get_hw</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, font.o(i.font_get_hw))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_font
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>

<P><STRONG><a name="[205]"></a>font_getdot</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, font.o(i.font_getdot))
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_dot_ymy_addr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_dot_wjq_addr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_gbk_get_area
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>

<P><STRONG><a name="[267]"></a>font_index_gbk_wjq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, font_wjq.o(i.font_index_gbk_wjq))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_dot_wjq_addr
</UL>

<P><STRONG><a name="[30a]"></a>font_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, font.o(i.font_init))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[26a]"></a>font_pos_1_big5</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, font_ymy.o(i.font_pos_1_big5))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_dot_ymy_addr
</UL>

<P><STRONG><a name="[269]"></a>font_pos_1_gbk</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, font_ymy.o(i.font_pos_1_gbk))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_dot_ymy_addr
</UL>

<P><STRONG><a name="[313]"></a>fun_sound_get_sta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, soundplay.o(i.fun_sound_get_sta))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
</UL>

<P><STRONG><a name="[26c]"></a>fun_sound_play</STRONG> (Thumb, 372 bytes, Stack size 0 bytes, soundplay.o(i.fun_sound_play))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_run
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_open
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
</UL>

<P><STRONG><a name="[26e]"></a>fun_sound_stop</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, soundplay.o(i.fun_sound_stop))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
</UL>

<P><STRONG><a name="[1a8]"></a>fun_sound_task</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, soundplay.o(i.fun_sound_task))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[25e]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[270]"></a>getxy</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, testutils.o(i.getxy))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_read_raw
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
</UL>

<P><STRONG><a name="[272]"></a>line</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, display.o(i.line))
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_drawpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_cross
</UL>

<P><STRONG><a name="[1b0]"></a>log_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, log.o(i.log_init))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[9b]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[288]"></a>math_log2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, maths.o(i.math_log2))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
</UL>

<P><STRONG><a name="[de]"></a>mcu_adc_IRQhandler</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, mcu_adc.o(i.mcu_adc_IRQhandler))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[19e]"></a>mcu_adc_temprate_init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, mcu_adc.o(i.mcu_adc_temprate_init))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[f0]"></a>mcu_can1_rx0_IRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mcu_can.o(i.mcu_can1_rx0_IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>mcu_dcmi_captruce</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_captruce))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_camera_show
</UL>

<P><STRONG><a name="[108]"></a>mcu_dcmi_dma_process</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_dma_process))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>mcu_dcmi_frame_process</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_frame_process))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>mcu_dcmi_get_sta</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_get_sta))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_camera_show
</UL>

<P><STRONG><a name="[196]"></a>mcu_dcmi_start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_start))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_camera_show
</UL>

<P><STRONG><a name="[20d]"></a>mcu_fsmc_lcd_Init</STRONG> (Thumb, 382 bytes, Stack size 0 bytes, stm324xg_eval_fsmc_sram.o(i.mcu_fsmc_lcd_Init))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
</UL>

<P><STRONG><a name="[1cb]"></a>mcu_hspi_close</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mcu_spi.o(i.mcu_hspi_close))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>

<P><STRONG><a name="[1c9]"></a>mcu_hspi_init</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, mcu_spi.o(i.mcu_hspi_init))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log2
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
</UL>

<P><STRONG><a name="[1cd]"></a>mcu_hspi_open</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, mcu_spi.o(i.mcu_hspi_open))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
</UL>

<P><STRONG><a name="[1d0]"></a>mcu_hspi_transfer</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, mcu_spi.o(i.mcu_hspi_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
</UL>

<P><STRONG><a name="[28e]"></a>mcu_i2s_config</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_config))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SCmd
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_I2SCLKConfig
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dataformat
</UL>

<P><STRONG><a name="[180]"></a>mcu_i2s_dataformat</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dataformat))
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_config
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_run
</UL>

<P><STRONG><a name="[181]"></a>mcu_i2s_dma_init</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dma_init))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_run
</UL>

<P><STRONG><a name="[105]"></a>mcu_i2s_dma_process</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dma_process))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>mcu_i2s_dma_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dma_start))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_run
</UL>

<P><STRONG><a name="[179]"></a>mcu_i2s_dma_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dma_stop))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_close
</UL>

<P><STRONG><a name="[1a3]"></a>mcu_i2s_init</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_init))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[294]"></a>mcu_i2sext_config</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2sext_config))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_FullDuplexConfig
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dataformat
</UL>

<P><STRONG><a name="[104]"></a>mcu_i2sext_dma_process</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2sext_dma_process))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[1e3]"></a>mcu_io_config_in</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_config_in))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
</UL>

<P><STRONG><a name="[1ba]"></a>mcu_io_config_out</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_config_out))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_resetpad
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_close
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
</UL>

<P><STRONG><a name="[1fa]"></a>mcu_io_config_timer</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_config_timer))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log2
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_iocap
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_open
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
</UL>

<P><STRONG><a name="[1ad]"></a>mcu_io_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_init))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[1dd]"></a>mcu_io_input_readbit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_input_readbit))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_scan
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readsda
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
</UL>

<P><STRONG><a name="[1bd]"></a>mcu_io_output_resetbit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_output_resetbit))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_close
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
</UL>

<P><STRONG><a name="[1bb]"></a>mcu_io_output_setbit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_output_setbit))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_resetpad
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
</UL>

<P><STRONG><a name="[1b1]"></a>mcu_rtc_init</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, mcu_rtc.o(i.mcu_rtc_init))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[15e]"></a>mcu_tim3_IRQhandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mcu_timer.o(i.mcu_tim3_IRQhandler))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>mcu_tim5_IRQhandler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mcu_timer.o(i.mcu_tim5_IRQhandler))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>mcu_tim7_IRQhandler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mcu_timer.o(i.mcu_tim7_IRQhandler))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[222]"></a>mcu_timer_cap_init</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, mcu_timer.o(i.mcu_timer_cap_init))
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[22d]"></a>mcu_timer_config</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, mcu_timer.o(i.mcu_timer_config))
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_open
</UL>

<P><STRONG><a name="[223]"></a>mcu_timer_get_cap</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, mcu_timer.o(i.mcu_timer_get_cap))
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[22c]"></a>mcu_timer_init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, mcu_timer.o(i.mcu_timer_init))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_init
</UL>

<P><STRONG><a name="[1fb]"></a>mcu_timer_pwm_init</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, mcu_timer.o(i.mcu_timer_pwm_init))
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
</UL>

<P><STRONG><a name="[1fd]"></a>mcu_timer_start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_timer.o(i.mcu_timer_start))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_open
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_open
</UL>

<P><STRONG><a name="[1f9]"></a>mcu_timer_stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_timer.o(i.mcu_timer_stop))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_close
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_close
</UL>

<P><STRONG><a name="[16a]"></a>mcu_uart1_IRQhandler</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart1_IRQhandler))
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>mcu_uart2_IRQhandler</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart2_IRQhandler))
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>mcu_uart3_IRQhandler</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart3_IRQhandler))
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1d3]"></a>mcu_uart_init</STRONG> (Thumb, 326 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart_init))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
</UL>

<P><STRONG><a name="[2be]"></a>mcu_uart_write</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart_write))
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[1de]"></a>mcu_vi2c_io_config_in</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_vi2c_io_config_in))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_input
</UL>

<P><STRONG><a name="[1d9]"></a>mcu_vi2c_io_config_out</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_vi2c_io_config_out))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
</UL>

<P><STRONG><a name="[2c4]"></a>osDelay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[2d5]"></a>osKernelInitialize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
</UL>

<P><STRONG><a name="[2c6]"></a>osKernelStart</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
</UL>

<P><STRONG><a name="[1b3]"></a>osMutexAcquire</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, cmsis_os2.o(i.osMutexAcquire))
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
</UL>

<P><STRONG><a name="[1b6]"></a>osMutexNew</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, cmsis_os2.o(i.osMutexNew))
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
</UL>

<P><STRONG><a name="[1b2]"></a>osMutexRelease</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, cmsis_os2.o(i.osMutexRelease))
<BR><BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>

<P><STRONG><a name="[15c]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.osSystickHandler))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18d]"></a>osThreadNew</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_init
</UL>

<P><STRONG><a name="[2d3]"></a>perform_calibration</STRONG> (Thumb, 674 bytes, Stack size 0 bytes, ts_calibrate.o(i.perform_calibration))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[276]"></a>petite_app</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, petite.o(i.petite_app))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>petite_dev_register</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, board_sysconf.o(i.petite_dev_register))
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[1d2]"></a>pkfifo_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, p_kfifo.o(i.pkfifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
</UL>

<P><STRONG><a name="[301]"></a>put_char</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, display.o(i.put_char))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string
</UL>

<P><STRONG><a name="[2ff]"></a>put_cross</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, display.o(i.put_cross))
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[300]"></a>put_string</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, display.o(i.put_string))
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string_center
</UL>

<P><STRONG><a name="[302]"></a>put_string_center</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, display.o(i.put_string_center))
<BR><BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[303]"></a>pvPortMalloc</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[336]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2ec]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[22e]"></a>rtp_fill_buff</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, touch.o(i.rtp_fill_buff))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
</UL>

<P><STRONG><a name="[306]"></a>rtp_get_point</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, touch.o(i.rtp_get_point))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
</UL>

<P><STRONG><a name="[18e]"></a>sd_fatfs_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sd_fat.o(i.sd_fatfs_init))
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_GetVolume
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
</UL>

<P><STRONG><a name="[308]"></a>sdcard_fatfs_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sd_fat.o(i.sdcard_fatfs_init))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
</UL>

<P><STRONG><a name="[a3]"></a>start_task</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, petite.o(i.start_task))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> petite.o(i.petite_app)
</UL>
<P><STRONG><a name="[ba]"></a>test_camera</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, wujique_test.o(i.test_camera))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_close
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_open
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_camera_show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>test_can_rec</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wujique_test.o(i.test_can_rec))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>test_can_snd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wujique_test.o(i.test_can_snd))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[30e]"></a>test_cogoled_lcd_display</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, wujique_test.o(i.test_cogoled_lcd_display))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spi_cog_display
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_i2c_oled_display
</UL>

<P><STRONG><a name="[c2]"></a>test_esp8266</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wujique_test.o(i.test_esp8266))
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>test_i2c_oled_display</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wujique_test.o(i.test_i2c_oled_display))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>test_key</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, wujique_test.o(i.test_key))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_read
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_open
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_close
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>test_keypad</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, wujique_test.o(i.test_keypad))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_open
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>test_lcd_font</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wujique_test.o(i.test_lcd_font))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>test_lcd_pic</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, wujique_test.o(i.test_lcd_pic))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>test_rs485_rec</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, wujique_test.o(i.test_rs485_rec))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>test_rs485_snd</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, wujique_test.o(i.test_rs485_snd))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>test_sound_buzzer</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, wujique_test.o(i.test_sound_buzzer))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_open
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_close
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>test_sound_dac</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, wujique_test.o(i.test_sound_dac))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>test_sound_fm</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, wujique_test.o(i.test_sound_fm))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_setfre
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_open
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>test_sound_rec</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, wujique_test.o(i.test_sound_rec))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_get_sta
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>test_sound_wm8978</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, wujique_test.o(i.test_sound_wm8978))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>test_spi_cog_display</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wujique_test.o(i.test_spi_cog_display))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>test_spiflash_board</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, wujique_test.o(i.test_spiflash_board))
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>test_spiflash_core</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, wujique_test.o(i.test_spiflash_core))
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>test_tft_display</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, wujique_test.o(i.test_tft_display))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>test_touchkey</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, wujique_test.o(i.test_touchkey))
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_read
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_open
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_close
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>test_tp_calibrate</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, wujique_test.o(i.test_tp_calibrate))
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_open
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_close
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_close
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>test_tp_test</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, wujique_test.o(i.test_tp_test))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_open
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_close
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_get_point
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_drawpoint
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>test_uart</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, wujique_test.o(i.test_uart))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[319]"></a>tp_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, touch.o(i.tp_close))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
</UL>

<P><STRONG><a name="[19c]"></a>tp_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, touch.o(i.tp_init))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[317]"></a>tp_open</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, touch.o(i.tp_open))
<BR><BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
</UL>

<P><STRONG><a name="[318]"></a>ts_calibrate</STRONG> (Thumb, 362 bytes, Stack size 0 bytes, ts_calibrate.o(i.ts_calibrate))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string_center
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_cross
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
</UL>

<P><STRONG><a name="[31d]"></a>ts_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tslib.o(i.ts_config))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[31c]"></a>ts_open</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tslib.o(i.ts_open))
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_variance_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_linear_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_dejitter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[31b]"></a>ts_open_module</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ts_calibrate.o(i.ts_open_module))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_set_cal
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_open
</UL>

<P><STRONG><a name="[307]"></a>ts_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tslib.o(i.ts_read))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dejitter_read
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_get_point
</UL>

<P><STRONG><a name="[271]"></a>ts_read_raw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tslib.o(i.ts_read_raw))
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_input_read
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getxy
</UL>

<P><STRONG><a name="[31f]"></a>ts_set_cal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tslib.o(i.ts_set_cal))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
</UL>

<P><STRONG><a name="[31e]"></a>tslib_read_rtp</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, touch.o(i.tslib_read_rtp))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_input_read
</UL>

<P><STRONG><a name="[10d]"></a>uart_printf</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, log.o(i.uart_printf))
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormat
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_GetVolume
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_camera_show
</UL>

<P><STRONG><a name="[2d7]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[326]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[33a]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[2df]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[2eb]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2d9]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, list.o(i.vListInsert))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[2d8]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2db]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2dd]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2e6]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[32d]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[321]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[2cc]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[2f8]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2c5]"></a>vTaskDelay</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[332]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2fe]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[324]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[323]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[325]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2c7]"></a>vTaskStartScheduler</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[2f6]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ca]"></a>vTaskSwitchContext</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[18f]"></a>vfs_add_node</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, vfs.o(i.vfs_add_node))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
</UL>

<P><STRONG><a name="[185]"></a>vfs_close</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, vfs.o(i.vfs_close))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_open
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_del
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>

<P><STRONG><a name="[309]"></a>vfs_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, vfs.o(i.vfs_init))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[18b]"></a>vfs_lseek</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, vfs.o(i.vfs_lseek))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_read
</UL>

<P><STRONG><a name="[188]"></a>vfs_open</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, vfs.o(i.vfs_open))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_find_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_font
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_open
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[189]"></a>vfs_read</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, vfs.o(i.vfs_read))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_open
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[186]"></a>wjq_free_m</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alloc.o(i.wjq_free_m))
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_t
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_del
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
</UL>

<P><STRONG><a name="[32b]"></a>wjq_free_t</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, alloc.o(i.wjq_free_t))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
</UL>

<P><STRONG><a name="[ef]"></a>wjq_log</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, log.o(i.wjq_log))
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_prepare_display
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_prepare_display
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_fill
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_prepare_display
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_fill
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_open
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_close
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can1_rx0_IRQ
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_t
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getxy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_variance_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_linear_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_dejitter_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_open
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_run
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_open
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_prepare_display
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_open
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_camera_show
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[17b]"></a>wjq_malloc_m</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, alloc.o(i.wjq_malloc_m))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_open
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_open
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_parse_creat
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_uart_open
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
</UL>

<P><STRONG><a name="[32c]"></a>wjq_malloc_t</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, alloc.o(i.wjq_malloc_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>

<P><STRONG><a name="[30d]"></a>wjq_test_showstr</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, wujique_test.o(i.wjq_test_showstr))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_font
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_can_snd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_can_rec
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[30c]"></a>wjq_wait_key</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wujique_test.o(i.wjq_wait_key))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_core
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_board
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[190]"></a>wujique_stm407_test</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wujique_test.o(i.wujique_stm407_test))
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_open
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_open
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_app_task
</UL>

<P><STRONG><a name="[328]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2d0]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[2cb]"></a>xQueueCreateMutex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[2ca]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[331]"></a>xQueueGenericCreate</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[2e0]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[2e9]"></a>xQueueGenericReset</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[2ce]"></a>xQueueGenericSend</STRONG> (Thumb, 352 bytes, Stack size 0 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[334]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[2cd]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[2f4]"></a>xQueueReceive</STRONG> (Thumb, 310 bytes, Stack size 0 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[2c9]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 376 bytes, Stack size 0 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[2c8]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[333]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2d2]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[2d1]"></a>xTaskCreateStatic</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[335]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[2cf]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[2f9]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[330]"></a>xTaskIncrementTick</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2e5]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[338]"></a>xTaskPriorityInherit</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2fd]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2f7]"></a>xTaskResumeAll</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[327]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2f1]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[aa]"></a>xpt2046_task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xpt2046.o(i.xpt2046_task))
<BR>[Address Reference Count : 1]<UL><LI> xpt2046.o(.constdata)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15d]"></a>SetSysClock</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[132]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[133]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[164]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TI1_Config))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[166]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TI2_Config))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[168]"></a>TI3_Config</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TI3_Config))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[162]"></a>TI4_Config</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TI4_Config))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[214]"></a>dev_spiflash_readJTD</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_readJTD))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
</UL>

<P><STRONG><a name="[211]"></a>dev_spiflash_waitwriteend</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_waitwriteend))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
</UL>

<P><STRONG><a name="[210]"></a>dev_spiflash_writeen</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, drv_spiflash.o(i.dev_spiflash_writeen))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
</UL>

<P><STRONG><a name="[21f]"></a>dev_tea5767_fre2pll</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, drv_tea5767.o(i.dev_tea5767_fre2pll))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_setfre
</UL>

<P><STRONG><a name="[21c]"></a>dev_tea5767_writereg</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drv_tea5767.o(i.dev_tea5767_writereg))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_setfre
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_open
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_init
</UL>

<P><STRONG><a name="[220]"></a>dev_touchkey_iocap</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_touchkey.o(i.dev_touchkey_iocap))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[221]"></a>dev_touchkey_resetpad</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_touchkey.o(i.dev_touchkey_resetpad))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[224]"></a>dev_touchkey_scan</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, drv_touchkey.o(i.dev_touchkey_scan))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[f1]"></a>CmdError</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.CmdError))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[f4]"></a>CmdResp1Error</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[f7]"></a>CmdResp2Error</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp2Error))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[f8]"></a>CmdResp3Error</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp3Error))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[f9]"></a>CmdResp6Error</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp6Error))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[fa]"></a>CmdResp7Error</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp7Error))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[116]"></a>FindSCR</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.FindSCR))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[136]"></a>SDEnWideBus</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SDEnWideBus))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[142]"></a>SD_NVIC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_NVIC_Configuration))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[6]"></a>drv_NT35510_display_onoff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_display_onoff))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>drv_NT35510_drawpoint</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_drawpoint))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_xy2cp
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_NT35510_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>drv_NT35510_scan_dir</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, drv_nt35510.o(i.drv_NT35510_scan_dir))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nt35510.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>drv_R61408_display_onoff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_display_onoff))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>drv_R61408_drawpoint</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_drawpoint))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_xy2cp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_R61408_set_cp_addr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>drv_R61408_scan_dir</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, drv_r61408.o(i.drv_R61408_scan_dir))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_r61408.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>drv_ILI9325_display_onoff</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_display_onoff))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>drv_ILI9325_drawpoint</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_drawpoint))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>drv_ILI9325_scan_dir</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_scan_dir))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9325.o(.data)
</UL>
<P><STRONG><a name="[23d]"></a>drv_ILI9325_set_cp_addr</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, drv_ili9325.o(i.drv_ILI9325_set_cp_addr))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_prepare_display
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
</UL>

<P><STRONG><a name="[24]"></a>drv_ILI9341_display_onoff</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_display_onoff))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>drv_ILI9341_drawpoint</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_drawpoint))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>drv_ILI9341_scan_dir</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, drv_ili9341.o(i.drv_ILI9341_scan_dir))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ili9341.o(.data)
</UL>
<P><STRONG><a name="[208]"></a>dev_lcd_finddrv</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_finddrv))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
</UL>

<P><STRONG><a name="[2e]"></a>drv_null_display_onoff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_display_onoff))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>drv_null_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>drv_ST7565_display_onoff</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_display_onoff))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>drv_ST7565_drawpoint</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_drawpoint))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[245]"></a>drv_ST7565_refresh_gram</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_refresh_gram))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_update
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[39]"></a>drv_ST7565_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_scan_dir))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>OV2640_ReadID</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_ReadID))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[124]"></a>OV2640_ReadReg</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_ReadReg))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadID
</UL>

<P><STRONG><a name="[122]"></a>OV2640_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
</UL>

<P><STRONG><a name="[123]"></a>OV2640_WriteReg</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_WriteReg))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadID
</UL>

<P><STRONG><a name="[12b]"></a>OV5640_I2C_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_I2C_close))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[129]"></a>OV5640_I2C_open</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_I2C_open))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[12d]"></a>OV5640_ReadReg</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_ReadReg))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[12a]"></a>OV5640_WriteReg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_WriteReg))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[225]"></a>dev_wm8978_setting_init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_setting_init))
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_spk_vol
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_phone_vol
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_mic_gain
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_aux_gain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_init
</UL>

<P><STRONG><a name="[226]"></a>dev_wm8978_writereg</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, wm8978.o(i.dev_wm8978_writereg))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_spk_vol
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_phone_vol
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_mic_gain
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_dataformat
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_aux_gain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[1f7]"></a>average</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, tslib.o(i.average))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dejitter_read
</UL>

<P><STRONG><a name="[1f4]"></a>dejitter_read</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, tslib.o(i.dejitter_read))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variance_read
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_read
</UL>

<P><STRONG><a name="[274]"></a>linear_read</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, tslib.o(i.linear_read))
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_input_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variance_read
</UL>

<P><STRONG><a name="[2c1]"></a>mod_dejitter_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tslib.o(i.mod_dejitter_init))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
</UL>

<P><STRONG><a name="[2c2]"></a>mod_linear_init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, tslib.o(i.mod_linear_init))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
</UL>

<P><STRONG><a name="[2c3]"></a>mod_variance_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tslib.o(i.mod_variance_init))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
</UL>

<P><STRONG><a name="[1f6]"></a>sqr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tslib.o(i.sqr))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variance_read
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_variance_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_dejitter_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dejitter_read
</UL>

<P><STRONG><a name="[275]"></a>ts_input_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tslib.o(i.ts_input_read))
<BR><BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tslib_read_rtp
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_read_raw
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_read
</UL>

<P><STRONG><a name="[1f5]"></a>variance_read</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, tslib.o(i.variance_read))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dejitter_read
</UL>

<P><STRONG><a name="[a1]"></a>sort_by_x</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testutils.o(i.sort_by_x))
<BR>[Address Reference Count : 1]<UL><LI> testutils.o(i.getxy)
</UL>
<P><STRONG><a name="[a2]"></a>sort_by_y</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testutils.o(i.sort_by_y))
<BR>[Address Reference Count : 1]<UL><LI> testutils.o(i.getxy)
</UL>
<P><STRONG><a name="[26f]"></a>get_sample</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ts_calibrate.o(i.get_sample))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getxy
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[329]"></a>vfs_find_dir</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, vfs.o(i.vfs_find_dir))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>

<P><STRONG><a name="[32a]"></a>vfs_get_dir_name</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, vfs.o(i.vfs_get_dir_name))
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>

<P><STRONG><a name="[26b]"></a>font_gbk_get_area</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, font.o(i.font_gbk_get_area))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
</UL>

<P><STRONG><a name="[1b9]"></a>bus_lcd_IO_init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_IO_init))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
</UL>

<P><STRONG><a name="[1d4]"></a>bus_vi2c_ack</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_ack))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[1d8]"></a>bus_vi2c_delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_delay))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>

<P><STRONG><a name="[1da]"></a>bus_vi2c_readbyte</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_readbyte))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_input
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readsda
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[1dc]"></a>bus_vi2c_readsda</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_readsda))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
</UL>

<P><STRONG><a name="[1d5]"></a>bus_vi2c_scl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_scl))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>

<P><STRONG><a name="[1d7]"></a>bus_vi2c_sda</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_sda))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>

<P><STRONG><a name="[1df]"></a>bus_vi2c_start</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_start))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[1e0]"></a>bus_vi2c_stop</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_stop))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
</UL>

<P><STRONG><a name="[1e2]"></a>bus_vi2c_wait_ack</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_wait_ack))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_input
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readsda
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[1e1]"></a>bus_vi2c_writebyte</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_writebyte))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[2e3]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[2e4]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[337]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2e7]"></a>prvInitialiseMutex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[2e8]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2ee]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[2ef]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2fc]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[2d6]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[2da]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2e1]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2e2]"></a>prvDeleteTCB</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[a5]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[2ea]"></a>prvInitialiseNewTask</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2dc]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[339]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2de]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[2fb]"></a>prvGetNextExpireTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2ed]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[2f0]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2f2]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2f5]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2f3]"></a>prvSampleTimeNow</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[2fa]"></a>prvSwitchTimerLists</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[a6]"></a>prvTimerTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[304]"></a>prvHeapInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[305]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[a4]"></a>prvTaskExitError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1e4]"></a>check_fs</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, ff.o(i.check_fs))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1f1]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[234]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[1e8]"></a>cmp_lfn</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1ea]"></a>create_chain</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, ff.o(i.create_chain))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1ed]"></a>create_name</STRONG> (Thumb, 544 bytes, Stack size 0 bytes, ff.o(i.create_name))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1ee]"></a>dbc_1st</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1ef]"></a>dbc_2nd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[22f]"></a>dir_alloc</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ff.o(i.dir_alloc))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[232]"></a>dir_clear</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, ff.o(i.dir_clear))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[236]"></a>dir_find</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, ff.o(i.dir_find))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[231]"></a>dir_next</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, ff.o(i.dir_next))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[238]"></a>dir_register</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, ff.o(i.dir_register))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[230]"></a>dir_sdi</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, ff.o(i.dir_sdi))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[254]"></a>find_volume</STRONG> (Thumb, 634 bytes, Stack size 0 bytes, ff.o(i.find_volume))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[260]"></a>follow_path</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, ff.o(i.follow_path))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[23a]"></a>gen_numname</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, ff.o(i.gen_numname))
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1eb]"></a>get_fat</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, ff.o(i.get_fat))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[259]"></a>get_ldnumber</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[261]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[255]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1e6]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1e7]"></a>mem_cmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.mem_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[239]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1f2]"></a>mem_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1e5]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ff.o(i.move_window))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1ec]"></a>put_fat</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, ff.o(i.put_fat))
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[23b]"></a>put_lfn</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, ff.o(i.put_lfn))
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[263]"></a>remove_chain</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, ff.o(i.remove_chain))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[262]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[25d]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[25c]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[237]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[264]"></a>sync_fs</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ff.o(i.sync_fs))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[233]"></a>sync_window</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ff.o(i.sync_window))
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[253]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ff.o(i.validate))
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[172]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[170]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 0 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[175]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[174]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
